1.
Considering the worst case,
N comparissions to see whether the element is already in the set
1 comparission to see whether the array allocated to the set is full
(N+1) in total

2.
When removing an element.
The number of steps needed to locate it-- N in worst case, M in general case
The number of steps to shift other elements to left-- N in worst case, N-M in general case
Therefore it is N steps in  total in general case.
Yes! The number of steps depend on N.

3.
When the set is not sorted, the number of operations is  (N+1)
When the set is sorted the number of comparission steps is log(N) steps
But the number of steps to insert the element and shift the other elements take N steps in the worst case,
But in the general case where the element is added to the M position, the number of steps to shift becomes N-M
Therefore the total number of steps is log(N)+(N-M)
This is smaller than N+1,
Therefore considering the number of operations required, keeping the set sorted is efficient.

4.
if(isEmpty()) return null;
else{
	//
	//
}
is efficient.
This is because the if control structure refers to a branch condition in the assembly code
Branches are efficient when the branching happens to nearby instructions
but inefficient when branching happens to a far away instruction.
In this format, both branching corresponding to if(TRUE) and if(FALSE) are to nearby instructions.

But in the case
if(!isEmpty()){
	//
	//
}
else return null;
the if(FALSE) branch is far from the if condition

5.
Yes.
The warnings about unchecked type casts could by removed by using the annotation 
@SuppressWarnings("unchecked") over the methods in which these type casts are done.
